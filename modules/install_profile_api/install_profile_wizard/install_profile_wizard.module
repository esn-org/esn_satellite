<?php
/* $Id: install_profile_wizard.module,v 1.1 2007/07/10 15:47:59 tatien Exp $ */
/* This module will dump a Drupal installation profile straight from the database. It needs editing, but will constitute a good start. */

/**
* Display help and module information
* @param section which section of the site we're displaying help
* @return help text for section
*/
function install_profile_wizard_help($section='') {

  $output = '';

  switch ($section) {
    case "admin/help#install_profile_wizard":
      $output = '<p>'.  t("Dumps a Drupal profile straight from the database. It needs editing, but will constitute a good start."). '</p>';
      $output = '<p>'.  t("In order to use the module, simply point your browser to your Drupal site on path '/install_profile_wizard/<your_install_profile_name>'. The installation profile file will be generated in a textarea. Just copy-paste it to a .profile file."). '</p>';
      break;
  }

  return $output;
}

/**
* Valid permissions for this module
* @return array An array of valid permissions for the install_profile_wizard module
*/

function install_profile_wizard_perm() {
  return array('access profile wizard');
}


/**
 * Implementation of hook_menu().
 *
 * You must implement hook_menu() to emit items to place in the main menu.
 * This is a required step for modules wishing to display their own pages,
 * because the process of creating the links also tells Drupal what
 * callback function to use for a given URL. The menu items returned
 * here provide this information to the menu system.
 *
 * With the below menu definitions, URLs will be interpreted as follows:
 *
 * If the user accesses http://example.com/?q=foo, then the menu system
 * will first look for a menu item with that path. In this case it will
 * find a match, and execute jacquard_foo().
 *
 * If the user accesses http://example.com/?q=bar, no match will be found,
 * and a 404 page will be displayed.
 *
 * If the user accesses http://example.com/?q=bar/baz, the menu system
 * will find a match and execute jacquard_baz().
 *
 * If the user accesses http://example.com/?q=bar/baz/1/2, the menu system
 * will first look for bar/baz/1/2. Not finding a match, it will look for
 * bar/baz/1. Again not finding a match, it will look for bar/baz. This
 * time it finds a match, and so will execute jacquard_baz(1,2). Note
 * the parameters being passed; this is a very useful technique.
 *
 * If the user accesses http://example.com/?q=bar/baz/52/97, the menu system
 * finds a match, but since its callback is absent, it proceeds
 * as above and ends up calling jacquard_baz(52,97) nonetheless.
 */
function install_profile_wizard_menu($may_cache) {
  $items = array();

  // The $may_cache parameter is used to divide menu items into two parts. Those
  // returned when $may_cache is true must be consistently applicable for the
  // current user at all times; the others may change or be defined at only
  // certain paths. Most modules will have excusively cacheable menu items.
  $items[] = array(
    'path' => 'install_profile_wizard', 
    'title' => t('Profile wizard'),
    'callback' => 'install_profile_wizard_page',
    'access' => user_access('access profile wizard'),
    'type' => MENU_CALLBACK);
  
  return $items;
}

function install_profile_wizard_page() {

  $profile = arg(1);

  /**********************************************************************
   * Modules
   **********************************************************************/
   
  $output = <<<EOT
<?php
/**
 * Installation profile.
 * This code was generated by the profile wizard
 * Date: $now
 *
 * This code goes in your .profile file
 */

/*
  You must include the crud.inc file in your profile.
  The file is part of the install_profile_api module.
*/
include_once('/path/to/crud.inc');

/**
* The modules that are enabled when this profile is installed.
*
* @return
*  An array of modules to be enabled.
*/
function ${profile}_profile_modules() {
  
  return array(

EOT;

  // Classify modules by their package.
  $modules = module_rebuild_cache();
  $packages = array();
  foreach ($modules as $module) {
    if ($module->status && $module->name != 'install_profile_wizard') {
      if (!isset($module->info['package']) || !$module->info['package']) {
        $module->info['package'] = 'Other';
      }
      $packages[$module->info['package']][$module->name] = $module->info;
    }
  }
  ksort($packages);
  
  // Output in order.
  foreach ($packages as $package => $modules) {
    $output .= <<<EOT

    /* $package */

EOT;
    $output .= "    ";
    foreach ($modules as $name => $module) {
      $output .= "'$name', ";
    }
    $output .= "\n";
  }
  
  $output .= <<<EOT
  
  );
  
}
EOT;


  /**********************************************************************
   * Details
   **********************************************************************/

  $output .= <<<EOT
  
  
/**
* Implementation of hook_profile_details().
*
* This contains an array of profile details for display from the main selection screen.
*/
function ${profile}_profile_details() {
  return array(
    'name' => st('Profile installation name'),
    'description' => st('Profile installation description.')
  );
}
  
EOT;


  /**********************************************************************
   * Final configuration
   **********************************************************************/

  $output .= <<<EOT
  
  
/**
* Implementation of hook_profile_final().
*
* FilmForge platform installation.
*/
function ${profile}_profile_final() {

  /* Build content types */
  
EOT;

  node_types_rebuild();
  $types = node_get_types();
  foreach ($types as $name => $type) {
    $types[$name] = get_object_vars($type);
  }
  
  $types_code = var_export($types, true);
  
$output .= <<<EOT
  \$types = $types_code;
  
  foreach (\$types as \$content_type) {
    install_add_content_type(\$content_type);
  }
  
  /* Variables */
  
  
EOT;
  global $conf;
  ksort($conf);
  foreach ($conf as $name => $value) {
    $output .= "  variable_set('$name', " . var_export($value, true) . ");\n";
  }
  
  $output .= <<<EOT
  
  /* Permissions */
  
  
EOT;
  
  $result = db_query("SELECT rid, perm FROM {permission} WHERE 1");
  $permissions = array();
  while ($permission = db_fetch_object($result)) {
    $permissions[$permission->rid] = explode(',', $permission->perm); 
  }
  
  foreach (user_roles() as $role_id => $role_name) {
    $perms = var_export($permissions[$role_id], true);
    if ($role_id > 2) {
      $output .= "  install_set_permissions(install_add_role('$role_name'), $perms);\n";
    } else {
      $output .= "  install_set_permissions($role_id, $perms);\n";
    }
  }


  $output .= <<<EOT

}

EOT;

  return '<textarea cols=\"100\" rows=\"200\">' . $output . '</textarea>';
}
