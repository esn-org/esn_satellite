<?php
// $Id: signup.install,v 1.2.2.4 2006/06/16 17:14:19 thehunmonkgroup Exp $

/**
 * Implementation of hook_install()
 *
 * This will automatically install the database tables for the Signup
 * module for both the MySQL and PostgreSQL databases.
 *
 * If you are using another database, you will have to install the
 * tables by hand, using the queries below as a reference.
 *
 * Note that the curly braces around table names are a drupal-specific
 * feature to allow for automatic database table prefixing, and will
 * need to be removed.
 */
function signup_install() {
  switch ($GLOBALS['db_type']) {
    case 'mysqli':
    case 'mysql':
      $q1 = db_query("CREATE TABLE IF NOT EXISTS {signup} (
                nid int(10) unsigned NOT NULL default '0',
                forwarding_email varchar(64) NOT NULL default '',
                send_confirmation int(2) NOT NULL default '0',
                confirmation_email longtext NOT NULL,
                send_reminder int(2) NOT NULL default '0',
                reminder_days_before int(4) unsigned NOT NULL default '0',
                reminder_email longtext NOT NULL,
                close_in_advance_time int(10) unsigned NOT NULL default '0',
                close_signup_limit int(10) unsigned NOT NULL default '0',
                completed int(2) NOT NULL default '0',
                PRIMARY KEY  (nid)
            ) TYPE=MyISAM /*!40100 DEFAULT CHARACTER SET utf8 */;");

      $q2 = db_query("CREATE TABLE IF NOT EXISTS {signup_log} (
                uid int(10) unsigned NOT NULL default '0',
                nid int(10) unsigned NOT NULL default '0',
                anon_mail varchar(255) NOT NULL default '',
                signup_time int(10) unsigned NOT NULL default '0',
                form_data longtext NOT NULL,
                KEY uid (uid),
                KEY nid (nid)
            ) TYPE=MyISAM /*!40100 DEFAULT CHARACTER SET utf8 */;");

      $q3 = db_query("INSERT INTO {signup} (nid, forwarding_email,
                send_confirmation, confirmation_email, send_reminder,
                reminder_days_before, reminder_email, close_in_advance_time,
                close_signup_limit, completed) VALUES (0, '', 1,
                'Enter your default confirmation email message here', 1, 0,
                'Enter your default reminder email message here', 0, 0, 0);");

      if ($q1 && $q2 && $q3) {
        $created = TRUE;
      }
      break;

    case 'pgsql':
      $q1 = db_query("CREATE TABLE {signup} (
                nid SERIAL,
                forwarding_email text NOT NULL default '',
                send_confirmation integer NOT NULL default '0',
                confirmation_email text NOT NULL default '',
                send_reminder integer NOT NULL default '0',
                reminder_days_before integer NOT NULL default '0',
                reminder_email text NOT NULL default '',
                close_in_advance_time integer NOT NULL default '0',
                close_signup_limit integer NOT NULL default '0',
                completed integer NOT NULL default '0',
                PRIMARY KEY (nid)
            );");

      $q2 = db_query("CREATE TABLE {signup_log} (
                uid integer NOT NULL default '0',
                nid integer NOT NULL default '0',
                anon_mail text NOT NULL default '',
                signup_time integer NOT NULL default '0',
                form_data text NOT NULL default ''
            );");

      $q3 = db_query("CREATE INDEX {signup_log}_uid_idx ON {signup_log}(uid);");

      $q4 = db_query("CREATE INDEX {signup_log}_nid_idx ON {signup_log}(nid);");

      $q5 = db_query( "INSERT INTO {signup} (nid, forwarding_email,
                send_confirmation, confirmation_email, send_reminder,
                reminder_days_before, reminder_email, close_in_advance_time,
                close_signup_limit, completed) VALUES (0, '', 1,
                'Enter your default confirmation email message here', 1, 0,
                'Enter your default reminder email message here', 0, 0, 0);");

      if ($q1 && $q2 && $q3 && $q4 && $q5) {
        $created = TRUE;
      }
      break;
  }

  if ($created) {
    drupal_set_message(t('Signup module installed successfully.'));
  }
  else {
    drupal_set_message(t('Table installation for the Signup module was unsuccessful. The tables may need to be installed by hand. See the signup.install file for a list of the installation queries.'), 'error');
  }
}

/**
 * UTF8 table update
 */
function signup_update_1() {
  return _system_update_utf8(array('signup', 'signup_log'));
}

function signup_update_2() {
  $ret = array();
  $ret[] = update_sql("ALTER TABLE {signup} DROP permissions");
  return $ret;
}

function signup_update_3() {
  $ret = array();
  switch ($GLOBALS['db_type']) {
    case 'mysql':
    case 'mysqli':
      $ret[] = update_sql("ALTER TABLE {signup_log} ADD anon_mail VARCHAR( 255 ) NOT NULL default '' AFTER nid;");
      $ret[] = update_sql("ALTER TABLE {signup_log} DROP INDEX uid_nid;");
      $ret[] = update_sql("ALTER TABLE {signup_log} ADD INDEX (uid);");
      $ret[] = update_sql("ALTER TABLE {signup_log} ADD INDEX (nid);");
    break;

    case 'pgsql':
      db_add_column($ret, 'signup_log', 'anon_mail', 'text', array('not null' => TRUE, 'default' => "''"));
      $ret[] = update_sql("DROP INDEX {signup_log}_uid_nid_idx;");
      $ret[] = update_sql("CREATE INDEX {signup_log}_uid_idx ON {signup_log}(uid);");
      $ret[] = update_sql("CREATE INDEX {signup_log}_nid_idx ON {signup_log}(nid);");
    break;

  }
  return $ret;
}
