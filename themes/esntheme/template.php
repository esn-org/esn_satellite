<?php
/*******************************************************************************
* START * TOP NAVIGATION MENU
*******************************************************************************/

/**
 * Print out the top navigation menu
 *
 * @return string
 */
function esntheme_primarylink_menu() {
	$output = '';
	// Default to the Primary Links menu
	$pid = variable_get('menu_primary_menu', 0);


	// This is a near-direct copy of menu_tree() from meu.inc.
	// The only difference is that we always call theme(menu_tree) on the item
	// rather than only if it's in the breadcrumb
	$menu = menu_get_menu();
	
	if (isset($menu['visible'][$pid]) && $menu['visible'][$pid]['children']) {
		foreach ($menu['visible'][$pid]['children'] as $mid) {
			$type = isset($menu['visible'][$mid]['type']) ? $menu['visible'][$mid]['type'] : NULL;
			$children = isset($menu['visible'][$mid]['children']) ? $menu['visible'][$mid]['children'] : NULL;
			$output .= theme('primarylink_menu_item', $mid, theme('primarylink_menu_tree', $mid), count($children) == 0);
		}
	}

	return '<ul class="jd_menu">' . $output . '</ul>';
}

/**
 * Top navigation helper function
 */
function esntheme_primarylink_menu_item($mid, $children = '', $leaf = TRUE) {
	return '<li>'. menu_item_link($mid) . $children ."</li>\n";
}

/**
 * Top navigation helper function
 */
function esntheme_primarylink_menu_tree($pid = 1) {

	$menu = menu_get_menu();
	$output = '';

	if (isset($menu['visible'][$pid]) && $menu['visible'][$pid]['children']) {
		foreach ($menu['visible'][$pid]['children'] as $mid) {
			$type = isset($menu['visible'][$mid]['type']) ? $menu['visible'][$mid]['type'] : NULL;
			$children = isset($menu['visible'][$mid]['children']) ? $menu['visible'][$mid]['children'] : NULL;
			$output .= theme('primarylink_menu_item', $mid, menu_in_active_trail($mid) || ($type & MENU_EXPANDED) ? theme('primarylink_menu_tree', $mid) : '', count($children) == 0);
		}
	}
	return "\n<ul class=\"menu\">\n". $output ."\n</ul>\n";

}



/*******************************************************************************
* END * TOP NAVIGATION MENU
*******************************************************************************/

/*******************************************************************************
* SIDE NAVIGATION MENU
*******************************************************************************/
/**
 * Print out the side navigation menu
 *
 * @return string
 */
function esntheme_side_navigation() {
	$output = '';
	
	$menu = menu_get_menu();
	$pid = menu_get_active_nontask_item();
	
	if (isset($menu['visible'][$pid]) && empty($menu['visible'][$pid]['children']) && ($menu['visible'][$pid]['pid'] != variable_get('menu_primary_menu', 0))) {
		$pid = $menu['visible'][$pid]['pid'];
	}
	
	if (isset($menu['visible'][$pid]) && $menu['visible'][$pid]['children']) {
		$output = '<ul id="nav-secondary" style="margin: 10px 0 10px 0; padding: 2px 0 1px 0; border-top: 3px solid #6FC8EB; border-bottom: 1px solid #6FC8EB;">';
		foreach ($menu['visible'][$pid]['children'] as $mid) {
			/**
			 * Only if they are pages (type == 118)
			 */
			$lis .= $menu['visible'][$mid]['type'] == 118 ? '<li>'.l($menu['visible'][$mid]['title'], $menu['visible'][$mid]['path']).'</li>' : null;
		}
		$output .= $lis.'</ul>';
	}

	return !empty($lis) ? $output : '';
}

/*******************************************************************************
* END * SIDE NAVIGATION MENU
*******************************************************************************/


/*******************************************************************************
* NEWS CONTENT TYPE VIEW
*******************************************************************************/
/**
 * views template to output a view.
 * This code was generated by the views theming wizard
 * Date: Sun, 2007-02-11 12:11
 * View: News
 *
 * This function goes in your template.php file
 */
function phptemplate_views_view_list_News($view, $nodes, $type) {
	$fields = _views_get_fields();

	$taken = array();

	// Set up the fields in nicely named chunks.
	foreach ($view->field as $id => $field) {
		$field_name = $field['field'];
		if (isset($taken[$field_name])) {
			$field_name = $field['queryname'];
		}
		$taken[$field_name] = true;
		$field_names[$id] = $field_name;
	}

	// Set up some variables that won't change.
	$base_vars = array(
	'view' => $view,
	'view_type' => $type,
	);

	foreach ($nodes as $i => $node) {
		$vars = $base_vars;
		$vars['node'] = $node;
		$vars['count'] = $i;
		$vars['stripe'] = $i % 2 ? 'even' : 'odd';
		foreach ($view->field as $id => $field) {
			$name = $field_names[$id];
			$vars[$name] = views_theme_field('views_handle_field', $field['queryname'], $fields, $field, $node, $view);
			if (isset($field['label'])) {
				$vars[$name . '_label'] = $field['label'];
			}
		}
		$items[] = _phptemplate_callback('views-list-News', $vars);
	}
	if ($items) {
		return theme('item_list', $items);
	}
}
/*******************************************************************************
* END * NEWS CONTENT TYPE VIEW
*******************************************************************************/


/*******************************************************************************
* HOMEPAGE CONTENT TYPE VIEW
*******************************************************************************/
/**
 * views template to output a view.
 * This code was generated by the views theming wizard
 * Date: Mon, 2007-02-12 19:08
 * View: Homepage
 *
 * This function goes in your template.php file
 */
function phptemplate_views_view_list_Homepage($view, $nodes, $type) {
	$fields = _views_get_fields();

	$taken = array();

	// Set up the fields in nicely named chunks.
	foreach ($view->field as $id => $field) {
		$field_name = $field['field'];
		if (isset($taken[$field_name])) {
			$field_name = $field['queryname'];
		}
		$taken[$field_name] = true;
		$field_names[$id] = $field_name;
	}

	// Set up some variables that won't change.
	$base_vars = array(
	'view' => $view,
	'view_type' => $type,
	);

	$vars['page'] = 0;
	
	foreach ($nodes as $i => $node) {
		$vars = $base_vars;
		$vars['node'] = $node;
		$vars['count'] = $i;
		$vars['stripe'] = $i % 2 ? 'even' : 'odd';
		foreach ($view->field as $id => $field) {
			$name = $field_names[$id];
			$vars[$name] = views_theme_field('views_handle_field', $field['queryname'], $fields, $field, $node, $view);
			if (isset($field['label'])) {
				$vars[$name . '_label'] = $field['label'];
			}
		}
		$items[] = _phptemplate_callback('news_homepage', $vars);
	}
	
	$vars['news'] = implode('<br>', $items);
	
	return _phptemplate_callback('homepage', $vars);
	
	
	if ($items) {
		return theme('item_list', $items);
	}
}
/*******************************************************************************
* END * HOMEPAGE CONTENT TYPE VIEW
*******************************************************************************/

/*******************************************************************************
* PARTNERS CONTENT TYPE VIEW
*******************************************************************************/
/**
 * views template to output a view.
 * This code was generated by the views theming wizard
 * Date: Sun, 2007-03-04 09:52
 * View: Partners
 *
 * This function goes in your template.php file
 */
function phptemplate_views_view_list_Partners($view, $nodes, $type) {
	$fields = _views_get_fields();

	$taken = array();

	// Set up the fields in nicely named chunks.
	foreach ($view->field as $id => $field) {
		$field_name = $field['field'];
		if (isset($taken[$field_name])) {
			$field_name = $field['queryname'];
		}
		$taken[$field_name] = true;
		$field_names[$id] = $field_name;
	}

	// Set up some variables that won't change.
	$base_vars = array(
	'view' => $view,
	'view_type' => $type,
	);

	foreach ($nodes as $i => $node) {
		$vars = $base_vars;
		$vars['node'] = $node;
		$vars['count'] = $i;
		$vars['stripe'] = $i % 2 ? 'even' : 'odd';
		foreach ($view->field as $id => $field) {
			$name = $field_names[$id];
			$vars[$name] = views_theme_field('views_handle_field', $field['queryname'], $fields, $field, $node, $view);
			if (isset($field['label'])) {
				$vars[$name . '_label'] = $field['label'];
			}
		}
		$items[] = _phptemplate_callback('views-list-Partners', $vars);
	}
	$out = '';
	if ($items) {
		foreach ($items as $item) {
			$out .= $item;
		}
		return $out;
	}
}
/*******************************************************************************
* END * PARTNERS CONTENT TYPE VIEW
*******************************************************************************/



function esntheme_icon($name, $style = '', $alt = '') {
	global $base_path;
	return '<img src="'.$base_path.'themes/esntheme/img/icons/'.$name.'" alt="'.$alt.'" style="display: inline; '.$style.'"/>';
}



/**
 * Return a themed breadcrumb trail.
 *
 * @param $breadcrumb
 *   An array containing the breadcrumb links.
 * @return a string containing the breadcrumb output.
 */
function esntheme_breadcrumb($breadcrumb) {

	if (!empty($breadcrumb)) {
		$breadcrumb[] = '<font style="color: #999;">'.drupal_get_title().'</font>';
		return '<div id="breadcrumb"> '.esntheme_icon('bullet_blue.png', 'margin-bottom: -4px;'). implode(' <font style="color: #E30079; font-weight: normal;" >//</font> ', $breadcrumb) .'</div>';
	}
}


/**
 * Return a themed table.
 *
 * @param $header
 *   An array containing the table headers. Each element of the array can be
 *   either a localized string or an associative array with the following keys:
 *   - "data": The localized title of the table column.
 *   - "field": The database field represented in the table column (required if
 *     user is to be able to sort on this column).
 *   - "sort": A default sort order for this column ("asc" or "desc").
 *   - Any HTML attributes, such as "colspan", to apply to the column header cell.
 * @param $rows
 *   An array of table rows. Every row is an array of cells, or an associative
 *   array with the following keys:
 *   - "data": an array of cells
 *   - Any HTML attributes, such as "class", to apply to the table row.
 *
 *   Each cell can be either a string or an associative array with the following keys:
 *   - "data": The string to display in the table cell.
 *   - Any HTML attributes, such as "colspan", to apply to the table cell.
 *
 *   Here's an example for $rows:
 *   @verbatim
 *   $rows = array(
 *     // Simple row
 *     array(
 *       'Cell 1', 'Cell 2', 'Cell 3'
 *     ),
 *     // Row with attributes on the row and some of its cells.
 *     array(
 *       'data' => array('Cell 1', array('data' => 'Cell 2', 'colspan' => 2)), 'class' => 'funky'
 *     )
 *   );
 *   @endverbatim
 *
 * @param $attributes
 *   An array of HTML attributes to apply to the table tag.
 * @param $caption
 *   A localized string to use for the <caption> tag.
 * @return
 *   An HTML string representing the table.
 */
function esntheme_table($header, $rows, $attributes = array(), $caption = NULL) {
	$output = '<table'. drupal_attributes($attributes) ." class=\"table1\">\n";

	if (isset($caption)) {
		$output .= '<caption>'. $caption ."</caption>\n";
	}

	// Format the table header:
	if (count($header)) {
		$ts = tablesort_init($header);
		$output .= ' <thead><tr>';
		foreach ($header as $cell) {
			$cell = tablesort_header($cell, $header, $ts);
			$output .= _theme_table_cell($cell, 1);
		}
		$output .= " </tr></thead>\n";
	}

	// Format the table rows:
	$output .= "<tbody>\n";
	if (count($rows)) {
		foreach ($rows as $number => $row) {
			$attributes = array();

			// Check if we're dealing with a simple or complex row
			if (isset($row['data'])) {
				foreach ($row as $key => $value) {
					if ($key == 'data') {
						$cells = $value;
					}
					else {
						$attributes[$key] = $value;
					}
				}
			}
			else {
				$cells = $row;
			}

			// Add odd/even class
			$class = ($number % 2 == 1) ? 'even': 'odd';
			if (isset($attributes['class'])) {
				$attributes['class'] .= ' '. $class;
			}
			else {
				$attributes['class'] = $class;
			}

			// Build row
			$output .= ' <tr'. drupal_attributes($attributes) .'>';
			$i = 0;
			foreach ($cells as $cell) {
				$cell = tablesort_cell($cell, $header, $ts, $i++);
				$output .= _theme_table_cell($cell, 0);
			}
			$output .= " </tr>\n";
		}
	}

	$output .= "</tbody></table>\n";
	return $output;
}



/**
 * Return a themed set of links.
 *
 * @param $links
 *   An array of links to be themed.
 * @param $delimiter
 *   A string used to separate the links.
 * @return
 *   A string containing the themed links.
 */
function esntheme_links($links, $delimiter = ' | ') {
	if (!is_array($links)) {
		return '';
	}
	//$out .= '<ul id="links">';
	foreach ($links as $link) {
		$out .= $link.' ';

	}
	//$out .= '</ul>';

	return $out;
}

/**
 * Define theme specific regions
 */
function esntheme_regions() {
	return array(
	'left' => t('Left Sidebar'),
	'right' => t('Right Sidebar'),
	'content_top' => t('Content Top'),
	'content' => t('Content'),
	'content_bottom' => t('Content Bottom'),
	'header' => t('Header'),
	'footer_message' => t('Footer')
	);
}


/*******************************************************************************
* UTILITY FUNCTIONS
*******************************************************************************/
function pr($var) {
	print '<pre>';
	print htmlentities(print_r($var, true));
	print '</pre>';
}

function extract_src($string) {
	// bugfix, eliminated spaces in regular expressions
	preg_match('/(src)=[\'"]?([^\'">]+)[\'">]/', $string, $matches);
	return $matches[2];
}

?>