<?php
// $Id: image.module,v 1.209.2.15 2007/03/23 17:55:52 drewish Exp $

/**
 * Implementation of hook_help
 */
function image_help($section) {
  switch ($section) {
    case 'admin/help#image':
      $output = '<p>'. t('The image module is used to create and administer images for your site. Each image is stored as a post, with thumbnails of the original generated automatically. There are two default thumbnail sizes, thumbnail and preview. The thumbnail size is shown as the preview for image posts and when browsing image galleries. The preview is the default size when first displaying an image node.') .'</p>';
      $output .= '<p>' .t('Image administration allows the image directory and the image sizes to be set.</p><p>
Image galleries are used to organize and display images in galleries.   The list tab allows users to edit existing image gallery names, descriptions, parents and relative position, known as a weight.  The add galleries tab allows you to create a new image gallery defining name, description, parent and weight.') .'</p>';
      $output .= t('<p>You can</p>
<ul>
<li>view image handling messages in <a href="%admin-settings">administer &gt;&gt; settings</a>.</li>
<li>configure image sizes and file directories at <a href="%admin-settings-image">administer &gt;&gt; settings &gt;&gt; image</a>.</li>
<li>use the <a href="%external-http-drupal-org-project-img_assist">image assist module</a> to upload and insert images into posts.</li>
', array('%admin-settings' => url('admin/settings'), '%admin-image-galleries' => url('admin/image/galleries'), '%admin-settings-image' => url('admin/settings/image'), '%external-http-drupal-org-project-img_assist' => 'http://drupal.org/project/img_assist')) .'</ul>';
      $output .= '<p>'. t('For more information please read the configuration and customization handbook <a href="%image">Image page</a>.', array('%image' => 'http://www.drupal.org/handbook/modules/image/')) .'</p>';
      return $output;
  }
}

/**
 * Implementation of hook_node_info
 */
function image_node_info() {
  return array(
    'image' => array(
      'name' => t('Image'),
      'module' => 'image',
      'description' => t('An image (with thumbnail). This is ideal for publishing photographs or screenshots.'),
    )
  );
}

/**
 * Implementation of hook_perm
 */
function image_perm() {
  return array('create images', 'view original images', 'edit own images');
}

/**
 * Implementation of hook_access
 */
function image_access($op, $node) {
  global $user;

  if ($op == 'create' && user_access('create images')) {
    return TRUE;
  }

  if ($op == 'update' || $op == 'delete') {
    if (user_access('edit own images') && ($user->uid == $node->uid)) {
      return TRUE;
    }
  }
}

/**
 * Admin settings callback.
 */
function image_admin_settings() {
  _image_check_settings();

  $form['image_updated'] = array('#type' => 'hidden', '#value' => time());

  $form['paths'] = array('#type' => 'fieldset', '#title' => t('File paths'));
  $form['paths']['image_default_path'] = array('#type' => 'textfield', '#title' => t('Default image path'), '#default_value' => variable_get('image_default_path', 'images'), '#description' => t('Subdirectory in the directory "%dir" where pictures will be stored. Do not include trailing slash.', array('%dir' => variable_get('file_directory_path', 'files'))));

  $form['image_max_upload_size'] = array('#type' => 'textfield', '#title' => t('Maximum upload size'), '#default_value' => variable_get('image_max_upload_size', 800), '#size' => 12, '#description' => t('Maximum size of uploads per file, in kilobytes'));

  $form['sizes'] = array('#type' => 'fieldset', '#title' => t('Image sizes'));
  $form['sizes']['image_sizes'] = image_settings_sizes_form();

  return system_settings_form($form);
}

function image_settings_sizes_form() {
  $sizes = _image_get_sizes();

  $form['#type'] = 'item';
  $form['#description'] = t('Select various pixel dimensions, "thumbnail" and "preview" are required.');
  $form['#tree'] = TRUE;
  $form['#theme'] = 'image_settings_sizes_form';
  for ($i = 0; $i < 5; $i++) {
    $form[$i]['label'] = array('#type' => 'textfield', '#default_value' => $sizes[$i]['label'], '#size' => 25);
    if (in_array($sizes[$i]['label'], _image_required_sizes())) {
      $form[$i]['label']['#attributes'] = array('disabled' => 'disabled');
      $form[$i]['label']['#value'] = $sizes[$i]['label'];
    }
    $form[$i]['width'] = array('#type' => 'textfield', '#default_value' => $sizes[$i]['width'], '#size' => 5, '#maxlength' => 5);
    $form[$i]['height'] = array('#type' => 'textfield', '#default_value' => $sizes[$i]['height'], '#size' => 5, '#maxlength' => 5);
  }

  return $form;
}

function theme_image_settings_sizes_form(&$form) {
  $header = array(t('Label'), t('Width'), t('Height'));
  foreach (element_children($form) as $key) {
    $row = array();
    $row[] = drupal_render($form[$key]['label']);
    $row[] = drupal_render($form[$key]['width']);
    $row[] = drupal_render($form[$key]['height']);
    $rows[] = $row;

  }
  $output = theme('table', $header, $rows);
  $output .= drupal_render($form);

  return $output;
}

/**
 * Implementation of hook_menu
 */
function image_menu($may_cache) {
  $items = array();

  if ($may_cache) {
    $items[] = array('path' => 'node/add/image', 'title' => t('Image'),
                     'access' => user_access('create images'));
    $items[] = array('path' => 'image/view', 'title' => t('image'),
                     'access' => user_access('access content'),
                     'type' => MENU_CALLBACK,
                     'callback' => 'image_fetch');
    $items[] = array('path' => 'admin/settings/image',
                     'title' => t('Image'),
                     'callback' => 'drupal_get_form',
                     'callback arguments' => array('image_admin_settings'),
                     'access' => user_access('administer site configuration'),
                     'type' => MENU_NORMAL_ITEM,
                     'description' => t('Image module settings.'),
                     );
  }

  return $items;
}

/**
 * Implements hook_cron. (deletes old temp images)
 */
function image_cron() {
  $path = variable_get('image_default_path', 'images') . '/temp';
  $files = file_scan_directory(file_create_path($path), '.*');
  foreach ($files as $file => $info) {
    if (time() - filemtime($file) > 60*60*6) {
      file_delete($file);
    }
  }
}

/**
 * Implementation of hook_prepare().
 */
function image_prepare(&$node, $field_name) {
  if (is_null($field_name)) {
    $field_name = 'image';
  }
  if ($file = file_check_upload($field_name)) {
    $image_info = image_get_info($file->filepath);
    if (!$image_info || !isset($image_info['extension'])) {
      form_set_error($field_name, t('Uploaded file is not a valid image. Only JPG, PNG and GIF files are allowed.'));
      return;
    }
    $file = file_save_upload($field_name, _image_filename($file->filename, NULL, TRUE));
    if (!$file) {
      return;
    }
    if ($file->filesize > variable_get('image_max_upload_size', 800) * 1024) {
      form_set_error($field_name, t('The image you uploaded was too big. You are only allowed upload files less than %max_size but your file was %file_size.', array('%max_size' => format_size(variable_get('image_max_upload_size', 800) * 1024), '%file_size' => format_size($file->filesize))));
      file_delete($file->filepath);
      return;
    }
    $node->images['_original'] = $file->filepath;
    $node->new_file = TRUE;

    // Call hook to allow other modules to modify the original image.
    module_invoke_all('image_alter', $node, $file->filepath, '_original');
    _image_build_derivatives($node, TRUE);
  }
}

/**
 * implement hook_file_download
 */
function image_file_download($file) {
  $size = image_get_info(file_create_path($file));
  if ($size) {
    $headers = array('Content-Type: ' . $size['mime_type']);
    return $headers;
  }
}

/**
 * Implementation of hook_link.
 */
function image_link($type, $node, $main = 0) {
  $links = array();

  if ($type == 'node' && $node->type == 'image' && !$main) {
    $request = ($_GET['size']) ? $_GET['size'] : 'preview';
    foreach (_image_get_sizes() as $size) {
      if ($node->images[$request] != $node->images[$size['label']]) {
        $links['image_size_'. $size['label']] = array('title' => t($size['label']), 'href' => 'node/' . $node->nid, 'query' => 'size=' . urlencode($size['label']));
      }
    }
    if (user_access('view original images') && ($node->images[$request] != $node->images['_original'])) {
      $links['image_size_original'] = array('title' => t('original'), 'href' => 'node/' . $node->nid, 'query' => 'size=_original');
    }
  }

  return $links;
}

/**
 * Implementation of hook_block.
 *
 * Offers 2 blocks: latest image and random image
 */
function image_block($op = 'list', $delta = 0) {
  switch ($op) {
    case 'list':
      $block[0]['info'] = t('Latest image');
      $block[1]['info'] = t('Random image');

      return $block;
    case 'view':
      if (user_access('access content')) {
        switch($delta) {
          case 0:
            $images = image_get_latest();
            $block['subject'] = t('Latest image');
            $block['content'] = l(image_display($images[0], 'thumbnail'), 'node/'.$images[0]->nid, array(), NULL, NULL, FALSE, TRUE);
            break;
          case 1:
            $images = image_get_random();
            $block['subject'] = t('Random image');
            $block['content'] = l(image_display($images[0], 'thumbnail'), 'node/'.$images[0]->nid, array(), NULL, NULL, FALSE, TRUE);
            break;
        }
      }
      return $block;
  }
}

function image_form_add_thumbnail($form_id, $edit) {
  if ($edit['images']['thumbnail']) {
    $node = (object)($edit);
    $form = array('#type' => 'item', '#title' => t('Thumbnail'), '#value' => image_display($node, 'thumbnail'), '#weight' => -10);
  }
  return $form;
}

/**
 * Implementation of hook_form
 */
function image_form(&$node, &$param) {
  _image_check_settings();

  $form['#attributes'] = array("enctype" => "multipart/form-data");
  $form['title'] = array('#type' => 'textfield', '#title' => t('Title'), '#size' => 60, '#maxlength' => 128, '#required' => TRUE, '#default_value' => $node->title);

  if ($node->new_file) {
    $form['new_file'] = array('#type' => 'value', '#value' => TRUE);
  }

  $form['images']['#tree'] = TRUE;
  if ($node->new_file) {
    $form['images']['_original'] = array('#type' => 'hidden', '#value' => $node->images['_original']);
  }
  else {
    $form['images']['_original'] = array('#type' => 'hidden', '#default_value' => $node->images['_original']);
  }
  foreach (_image_get_sizes() as $size) {
    if ($node->new_file) {
      $form['images'][$size['label']] = array('#type' => 'hidden', '#value' => $node->images[$size['label']]);
    }
    else {
      $form['images'][$size['label']] = array('#type' => 'hidden', '#default_value' => $node->images[$size['label']]);
    }
  }

  $form['thumbnail']['#after_build'][] = 'image_form_add_thumbnail';

  $form['image'] = array('#type' => 'file', '#title' => t('Image'), '#size' => 40, '#description' => t('Click "Browse..." to select an image to upload.'), '#weight' => -3);
  $form['body'] = array('#type' => 'textarea', '#title' => t('Body'), '#rows' => 20, '#default_value' => $node->body);
  $form['format'] = filter_form($node->format);

  return $form;
}

function image_submit(&$node) {
  _image_remove_derivatives($node);
  _image_build_derivatives($node, FALSE);
}

/**
 * Implementation of hook_view
 */
function image_view($node, $teaser = 0, $page = 0) {
  $request = ($_GET['size']) ? $_GET['size'] : 'preview';
  $request = check_plain($request);
  $node = node_prepare($node, $teaser);
  $node->content['image'] = array(
    '#value' => theme($teaser ? 'image_teaser' : 'image_body', $node, $request),
    '#weight' => 0,
  );
  return $node;
}

/**
 * Implementation of hook_load
 */
function image_load(&$node) {
  $result = db_query("SELECT filename, filepath FROM {files} WHERE nid=%d", $node->nid);
  $node->images = array();
  while ($file = db_fetch_object($result)) {
    $node->images[$file->filename] = $file->filepath;
  }
  // special images
  if (empty($node->images['thumbnail'])) {
    $node->images['thumbnail'] = $node->images['_original'];
  }
  if (empty($node->images['preview'])) {
    $node->images['preview'] = $node->images['_original'];
  }
}

/**
 * Implementation of hook_insert
 */
function image_insert($node) {
  foreach ($node->images as $label => $image) {
    _image_insert($node, $label, file_create_path($image));
  }
}

/**
 * Implementation of hook_update
 */
function image_update($node) {
  foreach ($node->images as $label => $image) {
    $old_file = db_fetch_object(db_query("SELECT fid, filepath FROM {files} WHERE filename='%s' AND nid=%d", $label, $node->nid));

    // This is a new image.
    if ($old_file->filepath != $image) {
      file_delete(file_create_path($old_file->filepath));
      db_query("DELETE FROM {files} WHERE fid = %d", $old_file->fid);
      db_query("DELETE FROM {file_revisions} WHERE fid = %d", $old_file->fid);
      _image_insert($node, $label, file_create_path($image));
    }
  }
}

/**
 * Implementation of hook_delete.
 */
function image_delete($node) {
  $result = db_query('SELECT fid, filepath FROM {files} WHERE nid = %d', $node->nid);
  while ($file = db_fetch_object($result)) {
    file_delete(file_create_path($file->filepath));
    db_query("DELETE FROM {file_revisions} WHERE fid = %d", $file->fid);
  }
  db_query('DELETE FROM {files} WHERE nid = %d', $node->nid);
}

/**
 * Implementation of hook_views_tables()
 */
function image_views_tables() {
  $tables['image'] = array(
    'name' => 'node',
    'fields' => array(
      'nid' => array(
        'name' => t('Image: Display Image'),
        'handler' => array(
          'image_views_handler_image_img' => t('Image'),
          'image_views_handler_image_img_link' => t('Image with link'),
        ),
        'option' => array(
          '#type' => 'select',
          '#options' => 'image_views_handler_filter_image_size',
        ),
        'notafield' => true,
        'sortable' => false,
      ),
    ),
  );
  return $tables;
}

/**
 * Create an <img> tag for an image.
 */
function image_display(&$node, $label = 'preview', $attributes = array()) {
  // regenerate images?
  if ($node->images[$label] != $node->images['_original'] &&
      (!file_exists(file_create_path($node->images[$label])) ||
       filemtime(file_create_path($node->images[$label])) < variable_get('image_updated', 0))) {
    _image_build_derivatives($node);
  }

  if (empty($node->images[$label])) {
    return;
  }

  $info = image_get_info(file_create_path($node->images[$label]));
  $attributes['class'] = "image $label". (isset($attributes['class']) ? " ". $attributes['class'] : "");
  $attributes['width'] = $info['width'];
  $attributes['height'] = $info['height'];

  return theme('image_display', $node, $label, file_create_url($node->images[$label]), $attributes);
}

/**
 * Fetches an image file, allows "shorthand" image urls such of the form:
 * image/view/$nid/$label
 * (e.g. image/view/25/thumbnail or image/view/14)
 */
function image_fetch($nid = 0, $size = 'preview') {
  if ($nid) {
    $node = node_load(array('nid' => $nid));
    if ($node->images[$size]) {
      $file = $node->images[$size];
      $headers = image_file_download($file);
      file_transfer($file, $headers);
    }
  }
}

/**
 * Theme a teaser
 */
function theme_image_teaser($node) {
 return l(image_display($node, 'thumbnail'), 'node/'. $node->nid, array(), NULL, NULL, TRUE, TRUE);
}

/**
 * Theme a body
 */
function theme_image_body($node, $size) {
 return image_display($node, $size);
}

/**
  * Theme an img tag for displaying the image.
  */
function theme_image_display($node, $label, $url, $attributes) {
  return '<img src="'. check_url($url) .'" alt="'. check_plain($node->title) .'" title="'. check_plain($node->title) .'" '. drupal_attributes($attributes) .' />';
}


/**
 * Fetch a random N image(s) - optionally from a given term.
 */
function image_get_random($count = 1, $tid = 0) {
  if ($tid != 0) {
    $result = db_query_range(db_rewrite_sql("SELECT n.nid FROM {term_node} tn LEFT JOIN {node} n ON n.nid=tn.nid WHERE n.type='image' AND n.status=1 AND tn.tid=%d ORDER BY RAND()"), $tid, 0, $count);
  }
  else {
    $result = db_query_range(db_rewrite_sql("SELECT n.nid FROM {node} n WHERE n.type='image' AND n.status=1 ORDER BY RAND()"), 0, $count);
  }
  $output = array();
  while ($nid = db_fetch_object($result)) {
    $output[] = node_load(array('nid' => $nid->nid));
  }
  return $output;
}

/**
 * Fetch the latest N image(s) - optionally from a given term.
 */
function image_get_latest($count = 1, $tid = 0) {
  if ($tid != 0) {
    $result = db_query_range(db_rewrite_sql("SELECT n.nid FROM {term_node} tn LEFT JOIN {node} n ON n.nid=tn.nid WHERE n.type='image' AND n.status=1 AND tn.tid=%d ORDER BY n.changed DESC"), $tid, 0, $count);
  }
  else {
    $result = db_query_range(db_rewrite_sql("SELECT n.nid FROM {node} n WHERE n.type='image' AND n.status=1 ORDER BY changed DESC"), 0, $count);
  }
  $output = array();
  while ($nid = db_fetch_object($result)) {
    $output[] = node_load(array('nid' => $nid->nid));
  }
  return $output;
}

/**
 * Views handler for displaying the image.
 */
function image_views_handler_image_img($fieldinfo, $fielddata, $value, $data) {
  $node = node_load($data->nid);
  return image_display($node, $fielddata['options']);
}

/**
 * Views handler for displaying the image in a link to the the image node
 */
function image_views_handler_image_img_link($fieldinfo, $fielddata, $value, $data) {
  $node = node_load($data->nid);
  return l(image_display($node, $fielddata['options']), "node/{$node->nid}", array(), NULL, NULL, FALSE, TRUE);
}

/**
 * Views - Generate a list of all the valid sizes that are available
 */
function image_views_handler_filter_image_size($op) {
  foreach (_image_get_sizes() as $size) {
    $a[$size['label']] = $size['label'];
  }
  $a['_original'] = 'original';
  return $a;
}

/**
 * Verify the image module and toolkit settings.
 */
function _image_check_settings() {
  // File paths
  $image_path = file_create_path(variable_get('image_default_path', 'images'));
  $temp_path = rtrim($image_path, '/') . '/temp';

  if (!file_check_directory($image_path, FILE_CREATE_DIRECTORY, 'image_default_path')) {
    return false;
  }
  if (!file_check_directory($temp_path, FILE_CREATE_DIRECTORY, 'image_default_path')) {
    return false;
  }

  // Sanity check : make sure we've got a working toolkit
  if (!image_get_toolkit()) {
    drupal_set_message(t('No image toolkit is currently enabled. Without one the image module will not be able to resize your images. You can select one from the <a href="!link">image toolkit settings page</a>.', array('!link' => url('admin/settings/image-toolkit'))), 'error');
    return false;
  }
  return true;
}

/**
 * Generate image derivatives.
 */
function _image_build_derivatives(&$node, $temp = FALSE) {
  // sanity check:
  if (!_image_check_settings()) {
    return false;
  }
  $info = image_get_info(file_create_path($node->images['_original']));
  // If we can't find our original image, we can not proceed.
  if (!$info) {
    return;
  }
  foreach (_image_get_sizes() as $size) {
    if ((!$size['width'] || !$size['height']) && ($info = image_get_info(file_create_path($node->images['_original'])))) {
      $aspect = $info['height'] / $info['width'];
      if ($size['width'] && !$size['height']) {
        $size['height'] = (int)round($size['width'] * $aspect);
      }
      elseif ($size['height'] && !$size['width']) {
        $size['width'] = (int)round($size['height'] / $aspect);
      }
    }
    if ($size['label'] && $size['width'] && $size['height']) {
      $source = file_create_path($node->images['_original']);
      $destination = _image_filename(basename($source), $size['label'], $temp);

      if ($info['width'] > $size['width'] || $info['height'] > $size['height']) {
        if (!image_scale($source, file_create_path($destination), $size['width'], $size['height'])) {
          drupal_set_message(t('Unable to create scaled %label image', array('%label' => $size['label'])), 'error');
          return FALSE;
        }
      }
      else {
        // Assume that a module that implements hook_image_alter() and there's
        // a possibility of modifying the derived images, so copy the original
        // to the devired and call hook_image_alter()
        if (!file_copy($source, $destination)) {
          drupal_set_message(t('Unable to create %label image', array('%label' => $size['label'])), 'error');
          return FALSE;
        }
      }
      $node->images[$size['label']] = $destination;
      module_invoke_all('image_alter', $node, file_create_path($destination), $size['label']);
    }
  }
}

function _image_remove_derivatives($node) {
  $result = db_query("SELECT * FROM {files} WHERE nid=%d AND filename <> '_original'", $node->nid);
  while ($file = db_fetch_object($result)) {
    // Never delete the original!
    if ($file->filepath != $node->images['_original']) {
      file_delete(file_create_path($file->filepath));
    }
  }
  $original_fid = db_result(db_query("SELECT fid FROM {files} WHERE nid=%d AND filename = '_original'", $node->nid));
  db_query("DELETE FROM {files} WHERE nid = %d AND filename <> '_original'", $node->nid);
  db_query("DELETE FROM {file_revisions} WHERE vid = %d AND fid <> %d", $node->vid, $original_fid);
}

/**
 * Creates an image filename.
 */
function _image_filename($filename, $type = NULL, $temp = FALSE) {
  $path = variable_get('image_default_path', 'images') .'/';
  if ($temp) {
    $path .= 'temp/';
  }

  if ($type) {
    $pos = strrpos($filename, '.');
    if ($pos === false) {
      // The file had no extension - which happens in really old image.module
      // versions, so figure out the extension.
      $info = image_get_info(file_create_path($path . $filename));
      $filename = $filename .'.'. $type .'.'. $info['extension'];
    }
    else {
      $filename = substr($filename, 0, $pos) .'.'. $type . substr($filename, $pos);
    }
  }

  return $path . $filename;
}

/**
 * Helper function to return the defined sizes (or proper defaults).
 */
function _image_get_sizes() {
  $sizes = variable_get('image_sizes', array(array('width' => 100, 'height' => 100, 'label' => 'thumbnail'),
                                             array('width' => 640, 'height' => 640, 'label' => 'preview')));
  return array_filter($sizes, create_function('$size', 'return !empty($size["label"]);'));
}

function _image_required_sizes() {
  return array('thumbnail', 'preview', '_original');
}

function _image_get_dimensions($label) {
  foreach (_image_get_sizes() as $size) {
    if ($size['label'] == $label) {
      return $size;
    }
  }
  return array();
}

/**
 * Moves temporary (working) images to the final directory and stores
 * relevant information in the files table
 */
function _image_insert($node, $label, $image) {
  // Don't duplicate images when a derivative == _original
  if (($label != '_original') && ($image == file_create_path($node->images['_original']))) {
    return;
  }

  $dest = _image_filename(basename($image));
  if (file_move($image, $dest)) {
    $path = file_create_path($dest);
    $info = image_get_info($path);
    $file = new stdClass();
    $file->filename = $label;
    $file->filepath = _image_filename(basename($image));
    $file->filemime = $info['mime_type'];
    $file->filesize = filesize($path);
    $fid = db_next_id('{files}_fid');
    db_query("INSERT INTO {files} (fid, nid, filename, filepath, filemime, filesize) VALUES (%d, %d, '%s', '%s', '%s', '%s')",
             $fid, $node->nid, $file->filename, $file->filepath, $file->filemime, $file->filesize);
    db_query("INSERT INTO {file_revisions} (fid, vid, description, list) VALUES (%d, %d, '%s', %d)",
             $fid, $node->vid, '', 0);
  }
}

