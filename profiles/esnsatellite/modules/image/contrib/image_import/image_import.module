<?php
// $Id: image_import.module,v 1.1.2.1 2007/02/26 06:57:54 drewish Exp $

function image_import_help($section = '') {
  switch ($section) {
    case 'admin/content/image_import':
      $output = '<p>'. t("Import multiple image files and save them as image nodes. The files will be moved from their location into the image module's files directory. ")
        . t("Searching for files ending with %extensions in %dirpath directory.", array('%dirpath' => realpath(variable_get('image_import_path', '')), '%extensions' => variable_get('image_import_extensions', 'jpg JPG'))) .'</p>';
      return $output;
    case 'admin/settings/image_import':
      return t("Configure the image import module's settings.");
    default:
      return null;
  }
}

function image_import_perm() {
  return array('import images');
}

function image_import_menu($may_cache) {
  $items = array();
  if ($may_cache) {
    $items[] = array(
      'path' => 'admin/content/image_import',
      'title' => t('Image import'),
      'callback' => 'drupal_get_form',
      'callback arguments' => array('image_import_form'),
      'access' => user_access('import images'),
      'type' => MENU_NORMAL_ITEM,
      'description' => t('Import images from the filesystem.')
    );
    $items[] = array(
      'path' => 'admin/settings/image_import',
      'title' => t('Image import'),
      'callback' => 'drupal_get_form',
      'callback arguments' => array('image_import_admin_settings'),
      'access' => user_access('administer site configuration'),
      'type' => MENU_NORMAL_ITEM,
      'description' => t('Change settings for the Image Import module.')
    );
  }

  return $items;
}

function image_import_form() {
  $form = array();

  $dirpath = variable_get('image_import_path', '');
  if (!file_check_directory($dirpath)) {
    drupal_set_message(t("You need to configure the import directory on the image import module's <a href='!admin-settings-image_import'>settings page</a>.", array('!admin-settings-image_import' => url('admin/settings/image_import'))), 'error');
    return $form;
  }

  // convert the extensions setting into a regex for file scanning
  $extensions = variable_get('image_import_extensions', 'jpg JPG');
  $filemask = '.*\.('. ereg_replace('[ ,]+', '|', preg_quote($extensions)) .')$';

  $files = file_scan_directory($dirpath, $filemask);
  ksort($files);

  if ($files) {
    if (module_exists('taxonomy')) {
      // here's a little hack to get the taxonmy controls onto our form
      $form['type'] = array('#type' => 'value', '#value' => 'image');
      $form['#node'] = new stdClass();
      $form['#node']->type = 'image';
      taxonomy_form_alter('image_node_form', $form);
      unset($form['type']);
      unset($form['#node']);
    }

    // Put the image files into an array for the checkboxes and gather
    // additional information like dimensions and filesizes. Make sure that
    // there's no 0th element, because a checkbox with a zero value is seen as
    // unchecked and won't be imported.
    $filelist = array(0 => NULL);
    $form['files']['filesize'][0] = $form['files']['dimensions'][0] = NULL;
    foreach ($files as $file) {
      $filelist[] = substr($file->filename, strlen($dirpath) + 1);
      $sizes = getimagesize($file->filename);
      $form['files']['filesize'][] = array(
        '#type' => 'item',
        '#value' => format_size(filesize($file->filename)),
      );
      $form['files']['dimensions'][] = array(
        '#type' => 'item',
        '#value' => $sizes[0] .'x'. $sizes[1],
      );
    }
    // Remove our 0 elements.
    unset($filelist[0]);
    unset($form['files']['filesize'][0]);
    unset($form['files']['dimensions'][0]);


    // Store a copy of the list into a form value so we can compare it to what
    // they submit and not have to worry about files being added or removed from
    // the filesystem.
    $form['file_list'] = array(
      '#type' => 'value',
      '#value' => $filelist,
    );
    $form['import_files'] = array(
      '#type' => 'checkboxes',
      '#options' => $filelist,
    );

    $form['buttons']['submit'] = array(
      '#type' => 'submit',
      '#value' => t('Import'),
    );
  }
  else {
    $form['audio_import_files'] = array(
      '#type' => 'item',
      '#value' => t('No files were found'),
    );
  }

  return $form;
}

function theme_image_import_form($form) {
  $output = '';
  if (isset($form['import_files']) && $form['import_files']['#type'] == 'checkboxes') {
    $header = array(theme('table_select_header_cell'), t('Name'), t('Size'), t('Dimensions'));
    $rows = array();
    foreach (element_children($form['import_files']) as $key) {
      $filename = $form['import_files'][$key]['#title'];
      unset($form['import_files'][$key]['#title']);
      $rows[] = array(
        drupal_render($form['import_files'][$key]),
        $filename,
        drupal_render($form['files']['filesize'][$key]),
        drupal_render($form['files']['dimensions'][$key]),
      );
    }
    $output .= theme('table', $header, $rows);
  }
  return $output . drupal_render($form);
}

function image_import_form_submit($form_id, $form_values) {
  $op = isset($form_values['op']) ? $form_values['op'] : '';
  if ($op == t('Import')) {
    $dirpath = variable_get('image_import_path', '');
    if (file_check_directory($dirpath)) {
      $nodes = array();
      $files = array();
      foreach (array_filter($form_values['import_files']) as $index) {
        // try to avoid php's script timeout with a bunch of large files or
        // a slow machine
        if (!ini_get('safe_mode')){
          set_time_limit(0);
        }

        $origname = $form_values['file_list'][$index];
        $filename = file_check_location($dirpath .'/'. $origname, $dirpath);
        if ($filename) {
          $node = _image_import_file($filename, $form_values['taxonomy']);
          if ($node) {
            $nodes[] = t('%filename as <a href="!node-link">@node-title</a> <a href="!edit-link">[edit]</a>', array(
              '%filename' => $origname,
              '!node-link' => url('node/'. $node->nid),
              '@node-title' => $node->title,
              '!edit-link' => url('node/'. $node->nid .'/edit'),
            ));
          }
          else {
            drupal_set_message(t('Error importing %filename.', array('%filename' => $filename)));
          }
        }
      }

      // report back on our progress
      if (count($nodes)) {
        drupal_set_message(t("Successfully imported: ". theme('item_list', $nodes)));
      }
      else {
        drupal_set_message(t('No image files were imported.'));
      }
    }
  }
}

function image_import_admin_settings() {
  $form['image_import_path'] = array(
    '#type' => 'textfield',
    '#title' => t('Import path'),
    '#default_value' => variable_get('image_import_path', 'files/images/import'),
    '#after_build' => array('_image_import_settings_check_directory'),
    '#description' => t("The directory to import image nodes from. Drupal will need to have write access to this directory so we can move the file.") .'<br />'
      . t("<strong>Note:</strong> a path begining with a <kbd>/</kbd> indicates the path is relative to the server's root, one starting without specifies a path relative to Drupal's root. I.e. <kbd>/tmp/image</kbd> would be the temp directory off the root while <kbd>tmp/image</kbd> would be inside Drupal's directory."),
    '#required' => TRUE,
  );

  $form['image_import_extensions'] = array(
    '#type' => 'textfield',
    '#title' => t('File extensions'),
    '#default_value' => variable_get('image_import_extensions', 'jpg JPG'),
    '#description' => t('A comma or space separated list of file extensions to list on the import page. <strong>Note:</strong> the extensions are case sensitive, i.e. <code>JPG</code> and <code>jpg</code> are not the same.'),
    '#required' => TRUE,
  );

  return system_settings_form($form);
}

function _image_import_file($filepath, $taxonomy) {
  global $user;

  //check for user permission...
  if (!user_access('create images')) {
    drupal_access_denied();
  }

  // build a file object
  $file = new stdClass();
  $file->filepath = realpath($filepath);
  $file->filename = basename($file->filepath);

  // start building a node
  $node = new stdClass();
  $node->type = 'image';
  $node->uid = $user->uid;
  $node->name = $user->name;

  // set the node's defaults... (copied this from node and comment.module)
  $node_options = variable_get('node_options_'. $node->type, array('status', 'promote'));
  $node->status = in_array('status', $node_options);
  $node->promote = in_array('promote', $node_options);
  if (module_exists('comment')) {
    $node->comment = variable_get("comment_$node->type", COMMENT_NODE_READ_WRITE);
  }
  if (module_exists('taxonomy')) {
    $node->taxonomy = $taxonomy;
  }

  // start filling in the image info...
  $node->title = $file->filename;

  // copy the file so if there's a problem it can be re-imported.
  if (file_copy($file, _image_filename($file->filename, NULL, TRUE), FILE_EXISTS_RENAME)) {
    if ($image = image_get_info($file->filepath)) {
      $node->images['_original'] = $file->filepath;
      _image_build_derivatives($node, TRUE);
      $node->new_file = TRUE;

      $node = node_submit($node);
      node_save($node);

      // remove the original file
      file_delete($filepath);

      return $node;
    }
    // the copied file wasn't a proper image, trash it
    file_delete($file->filepath);
  }
  return FALSE;
}

/**
 * Checks the existence of the directory specified in $form_element.
 *
 * @param $form_element
 *   The form element containing the name of the directory to check.
 * @see system_check_directory()
 */
function _image_import_settings_check_directory($form_element) {
  $importDir = $form_element['#value'];
  file_check_directory($importDir, 0, $form_element['#parents'][0]);
  $imageDir = file_create_path(variable_get('image_default_path', 'images'));
  if (realpath($importDir) == realpath($imageDir)) {
    form_set_error($form_element['#parents'][0], t("You can't import from the image module's directory. The import deletes the original files so you would just be asking for trouble."));
  }
  return $form_element;
}
